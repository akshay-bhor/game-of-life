{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["tRows","tCols","operations","App","useState","rows","i","push","Array","fill","grid","setGrid","running","setRunning","runningRef","useRef","gridRef","current","run","useCallback","gridCopy","j","neighbors","forEach","x","y","nI","nJ","setTimeout","style","display","justifyContent","margin","onClick","prevState","from","Math","random","gridTemplateColumns","gridTemplateRows","map","cols","tmp","index","jendex","select","width","height","border","backgroundColor","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a18a1c29.chunk.js","sourcesContent":["import { Fragment, useCallback, useRef, useState } from \"react\";\n\nconst tRows = 52;\nconst tCols = 125;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < tRows; i++) {\n      rows.push(Array(tCols).fill(0));\n    }\n\n    return rows;\n  });\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef();\n  const gridRef = useRef();\n  runningRef.current = running;\n  gridRef.current = grid;\n\n  const toggle = () => {\n    setRunning((prevState) => !prevState);\n    runningRef.current = true;\n    run();\n  };\n\n  const run = useCallback(() => { \n    if (!runningRef.current) return;\n    \n    // Copy grid\n    let gridCopy = [...gridRef.current];\n    \n    for(let i = 0; i < tRows; i++) {\n      for(let j = 0; j < tCols; j++) {\n        let neighbors = 0;\n        operations.forEach(([x, y]) => {\n          const nI = i + x;\n          const nJ = j + y;\n\n          if(nI >= 0 && nI < tRows && nJ >= 0 && nJ < tCols) {\n            neighbors += gridRef.current[nI][nJ];\n          }\n        });\n        \n        if(neighbors < 2 || neighbors > 3) { \n          gridCopy[i][j] = 0;\n        }\n        else if(gridRef.current[i][j] == 0 && neighbors == 3) { \n          gridCopy[i][j] = 1;\n        }\n      }\n    }\n   \n    setGrid(gridCopy);\n\n    setTimeout(run, 200);\n  }, []);\n\n  const random = () => {\n    const rows = [];\n    for (let i = 0; i < tRows; i++) {\n      rows.push(Array.from(Array(tCols), () => (Math.random() > 0.8 ? 1 : 0)));\n    }\n\n    setGrid(rows);\n  };\n\n  const reset = () => {\n    const rows = [];\n    for (let i = 0; i < tRows; i++) {\n      rows.push(Array(tCols).fill(0));\n    }\n    setRunning(false);\n    setGrid(rows);\n  };\n\n  const select = (i, j) => {\n    let tmp = [...grid];\n    tmp = tmp.map((rows, index) => {\n      return rows.map((cols, jendex) => {\n        if (i == index && j == jendex) return 1;\n        else return grid[index][jendex];\n      });\n    });\n\n    setGrid(tmp);\n  };\n  \n  return (\n    <Fragment>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          margin: \"20px auto\",\n        }}\n      >\n        <button onClick={toggle}>{running ? \"Stop\" : \"Start\"}</button>\n        <button onClick={random}>Random</button>\n        <button onClick={reset}>Reset</button>\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${tCols}, 12px)`,\n          gridTemplateRows: `repeat(${tRows}, 12px)`,\n        }}\n      >\n        {grid.map((rows, i) => {\n          return rows.map((cols, j) => {\n            return (\n              <div\n                key={`${i}${j}`}\n                onClick={() => select(i, j)}\n                style={{\n                  width: 12,\n                  height: 12,\n                  border: \"1px solid #ccc\",\n                  backgroundColor: grid[i][j] ? \"black\" : undefined,\n                }}\n              ></div>\n            );\n          });\n        })}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}