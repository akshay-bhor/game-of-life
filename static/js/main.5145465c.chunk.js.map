{"version":3,"sources":["SimulateGame.js","App.js","reportWebVitals.js","index.js"],"names":["SimulateGame","grid","tRows","tCols","operations","gridCopy","map","arr","slice","i","j","neighbors","forEach","x","y","nI","nJ","App","useState","rows","push","Array","fill","setGrid","running","setRunning","speed","setSpeed","runningRef","useRef","current","speedRef","run","useCallback","g","setTimeout","style","display","justifyContent","margin","onClick","prevState","from","Math","random","type","value","onChange","e","target","name","gridTemplateColumns","gridTemplateRows","cols","tmp","index","jendex","select","width","height","border","backgroundColor","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5145465c.chunk.js","sourcesContent":["const SimulateGame = (grid, tRows, tCols, operations) => {\r\n    // Copy grid\r\n    let gridCopy = grid.map(arr => {\r\n      return arr.slice();\r\n    });\r\n    \r\n    for(let i = 0; i < tRows; i++) {\r\n      for(let j = 0; j < tCols; j++) {\r\n        let neighbors = 0;\r\n        operations.forEach(([x, y]) => {\r\n          const nI = i + x;\r\n          const nJ = j + y;\r\n          \r\n          if(nI >= 0 && nI < tRows && nJ >= 0 && nJ < tCols) {\r\n            neighbors += grid[nI][nJ];\r\n          }\r\n        })       \r\n        \r\n        \r\n        if(neighbors < 2 || neighbors > 3) { \r\n          gridCopy[i][j] = 0;\r\n        }\r\n        if(grid[i][j] == 0 && neighbors == 3) { \r\n          gridCopy[i][j] = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return gridCopy;\r\n}\r\n\r\nexport default SimulateGame;","import { Fragment, useCallback, useRef, useState } from \"react\";\nimport SimulateGame from \"./SimulateGame\";\n\nconst tRows = 52;\nconst tCols = 125;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0]\n];\n\nfunction App() {\n  const [grid, setGrid] = useState(() => {\n    const rows = [];\n    for (let i = 0; i < tRows; i++) {\n      rows.push(Array(tCols).fill(0));\n    }\n\n    return rows;\n  });\n  const [running, setRunning] = useState(false);\n  const [speed, setSpeed] = useState(200);\n\n  const runningRef = useRef();\n  runningRef.current = running;\n  const speedRef = useRef();\n  speedRef.current = speed;\n\n  const run = useCallback(() => { \n    if (!runningRef.current) return;\n    \n    setGrid(g => {\n\n      // Copy nested array\n      let gridCopy = g.map(arr => {\n        return arr.slice();\n      });\n\n      return (\n        SimulateGame(gridCopy, tRows, tCols, operations)\n      )\n    });\n\n    setTimeout(run, speedRef.current);\n  }, []);\n\n  const toggle = () => {\n    setRunning((prevState) => !prevState);\n    runningRef.current = true;\n    run();\n  };\n\n  const random = () => {\n    const rows = [];\n    for (let i = 0; i < tRows; i++) {\n      rows.push(Array.from(Array(tCols), () => (Math.random() > 0.8 ? 1 : 0)));\n    }\n\n    setGrid(rows);\n  };\n\n  const reset = () => {\n    const rows = [];\n    for (let i = 0; i < tRows; i++) {\n      rows.push(Array(tCols).fill(0));\n    }\n    setRunning(false);\n    setGrid(rows);\n  };\n\n  const select = (i, j) => {\n    let tmp = [...grid];\n    tmp = tmp.map((rows, index) => {\n      return rows.map((cols, jendex) => {\n        if (i == index && j == jendex) return 1;\n        else return grid[index][jendex];\n      });\n    });\n\n    setGrid(tmp);\n  };\n  \n  return (\n    <Fragment>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          margin: \"20px auto\",\n        }}\n      >\n        <button onClick={toggle}>{running ? \"Stop\" : \"Start\"}</button>\n        <button onClick={random}>Random</button>\n        <button onClick={reset}>Reset</button>\n        <label>Speed:</label>\n        <input type='number' value={speed} onChange={(e) => {\n            if(e.target.value >= 20)\n              setSpeed(e.target.value)\n          }} \n          name=\"speed\" />\n      </div>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${tCols}, 12px)`,\n          gridTemplateRows: `repeat(${tRows}, 12px)`,\n        }}\n      >\n        {grid.map((rows, i) => {\n          return rows.map((cols, j) => {\n            return (\n              <div\n                key={`${i}${j}`}\n                onClick={() => select(i, j)}\n                style={{\n                  width: 12,\n                  height: 12,\n                  border: \"1px solid #ccc\",\n                  backgroundColor: grid[i][j] ? \"black\" : undefined,\n                }}\n              ></div>\n            );\n          });\n        })}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}